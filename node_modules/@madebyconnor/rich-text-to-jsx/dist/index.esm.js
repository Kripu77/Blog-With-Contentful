import React, { Fragment } from 'react';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var blocks = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.BLOCKS = void 0;
/**
 * Map of all Contentful block types. Blocks contain inline or block nodes.
 */
var BLOCKS;
(function (BLOCKS) {
    BLOCKS["DOCUMENT"] = "document";
    BLOCKS["PARAGRAPH"] = "paragraph";
    BLOCKS["HEADING_1"] = "heading-1";
    BLOCKS["HEADING_2"] = "heading-2";
    BLOCKS["HEADING_3"] = "heading-3";
    BLOCKS["HEADING_4"] = "heading-4";
    BLOCKS["HEADING_5"] = "heading-5";
    BLOCKS["HEADING_6"] = "heading-6";
    BLOCKS["OL_LIST"] = "ordered-list";
    BLOCKS["UL_LIST"] = "unordered-list";
    BLOCKS["LIST_ITEM"] = "list-item";
    BLOCKS["HR"] = "hr";
    BLOCKS["QUOTE"] = "blockquote";
    BLOCKS["EMBEDDED_ENTRY"] = "embedded-entry-block";
    BLOCKS["EMBEDDED_ASSET"] = "embedded-asset-block";
    BLOCKS["TABLE"] = "table";
    BLOCKS["TABLE_ROW"] = "table-row";
    BLOCKS["TABLE_CELL"] = "table-cell";
    BLOCKS["TABLE_HEADER_CELL"] = "table-header-cell";
})(BLOCKS = exports.BLOCKS || (exports.BLOCKS = {}));

});

unwrapExports(blocks);
var blocks_1 = blocks.BLOCKS;

var inlines = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.INLINES = void 0;
/**
 * Map of all Contentful inline types. Inline contain inline or text nodes.
 */
var INLINES;
(function (INLINES) {
    INLINES["HYPERLINK"] = "hyperlink";
    INLINES["ENTRY_HYPERLINK"] = "entry-hyperlink";
    INLINES["ASSET_HYPERLINK"] = "asset-hyperlink";
    INLINES["EMBEDDED_ENTRY"] = "embedded-entry-inline";
})(INLINES = exports.INLINES || (exports.INLINES = {}));

});

unwrapExports(inlines);
var inlines_1 = inlines.INLINES;

var marks = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Map of all Contentful marks.
 */
var MARKS;
(function (MARKS) {
    MARKS["BOLD"] = "bold";
    MARKS["ITALIC"] = "italic";
    MARKS["UNDERLINE"] = "underline";
    MARKS["CODE"] = "code";
})(MARKS || (MARKS = {}));
exports.default = MARKS;

});

unwrapExports(marks);

var schemaConstraints = createCommonjsModule(function (module, exports) {
var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1_NODE_TYPES = exports.TEXT_CONTAINERS = exports.HEADINGS = exports.CONTAINERS = exports.VOID_BLOCKS = exports.TABLE_BLOCKS = exports.LIST_ITEM_BLOCKS = exports.TOP_LEVEL_BLOCKS = void 0;


/**
 * Array of all top level block types.
 * Only these block types can be the direct children of the document.
 */
exports.TOP_LEVEL_BLOCKS = [
    blocks.BLOCKS.PARAGRAPH,
    blocks.BLOCKS.HEADING_1,
    blocks.BLOCKS.HEADING_2,
    blocks.BLOCKS.HEADING_3,
    blocks.BLOCKS.HEADING_4,
    blocks.BLOCKS.HEADING_5,
    blocks.BLOCKS.HEADING_6,
    blocks.BLOCKS.OL_LIST,
    blocks.BLOCKS.UL_LIST,
    blocks.BLOCKS.HR,
    blocks.BLOCKS.QUOTE,
    blocks.BLOCKS.EMBEDDED_ENTRY,
    blocks.BLOCKS.EMBEDDED_ASSET,
    blocks.BLOCKS.TABLE,
];
/**
 * Array of all allowed block types inside list items
 */
exports.LIST_ITEM_BLOCKS = [
    blocks.BLOCKS.PARAGRAPH,
    blocks.BLOCKS.HEADING_1,
    blocks.BLOCKS.HEADING_2,
    blocks.BLOCKS.HEADING_3,
    blocks.BLOCKS.HEADING_4,
    blocks.BLOCKS.HEADING_5,
    blocks.BLOCKS.HEADING_6,
    blocks.BLOCKS.OL_LIST,
    blocks.BLOCKS.UL_LIST,
    blocks.BLOCKS.HR,
    blocks.BLOCKS.QUOTE,
    blocks.BLOCKS.EMBEDDED_ENTRY,
    blocks.BLOCKS.EMBEDDED_ASSET,
];
exports.TABLE_BLOCKS = [
    blocks.BLOCKS.TABLE,
    blocks.BLOCKS.TABLE_ROW,
    blocks.BLOCKS.TABLE_CELL,
    blocks.BLOCKS.TABLE_HEADER_CELL,
];
/**
 * Array of all void block types
 */
exports.VOID_BLOCKS = [blocks.BLOCKS.HR, blocks.BLOCKS.EMBEDDED_ENTRY, blocks.BLOCKS.EMBEDDED_ASSET];
/**
 * Dictionary of all container block types, and the set block types they accept as children.
 *
 * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`
 */
exports.CONTAINERS = (_a = {},
    _a[blocks.BLOCKS.OL_LIST] = [blocks.BLOCKS.LIST_ITEM],
    _a[blocks.BLOCKS.UL_LIST] = [blocks.BLOCKS.LIST_ITEM],
    _a[blocks.BLOCKS.LIST_ITEM] = exports.LIST_ITEM_BLOCKS,
    _a[blocks.BLOCKS.QUOTE] = [blocks.BLOCKS.PARAGRAPH],
    _a[blocks.BLOCKS.TABLE] = [blocks.BLOCKS.TABLE_ROW],
    _a[blocks.BLOCKS.TABLE_ROW] = [blocks.BLOCKS.TABLE_CELL, blocks.BLOCKS.TABLE_HEADER_CELL],
    _a[blocks.BLOCKS.TABLE_CELL] = [blocks.BLOCKS.PARAGRAPH],
    _a[blocks.BLOCKS.TABLE_HEADER_CELL] = [blocks.BLOCKS.PARAGRAPH],
    _a);
/**
 * Array of all heading levels
 */
exports.HEADINGS = [
    blocks.BLOCKS.HEADING_1,
    blocks.BLOCKS.HEADING_2,
    blocks.BLOCKS.HEADING_3,
    blocks.BLOCKS.HEADING_4,
    blocks.BLOCKS.HEADING_5,
    blocks.BLOCKS.HEADING_6,
];
/**
 * Array of all block types that may contain text and inline nodes.
 */
exports.TEXT_CONTAINERS = __spreadArray([blocks.BLOCKS.PARAGRAPH], exports.HEADINGS, true);
/**
 * Node types before `tables` release.
 */
exports.V1_NODE_TYPES = [
    blocks.BLOCKS.DOCUMENT,
    blocks.BLOCKS.PARAGRAPH,
    blocks.BLOCKS.HEADING_1,
    blocks.BLOCKS.HEADING_2,
    blocks.BLOCKS.HEADING_3,
    blocks.BLOCKS.HEADING_4,
    blocks.BLOCKS.HEADING_5,
    blocks.BLOCKS.HEADING_6,
    blocks.BLOCKS.OL_LIST,
    blocks.BLOCKS.UL_LIST,
    blocks.BLOCKS.LIST_ITEM,
    blocks.BLOCKS.HR,
    blocks.BLOCKS.QUOTE,
    blocks.BLOCKS.EMBEDDED_ENTRY,
    blocks.BLOCKS.EMBEDDED_ASSET,
    inlines.INLINES.HYPERLINK,
    inlines.INLINES.ENTRY_HYPERLINK,
    inlines.INLINES.ASSET_HYPERLINK,
    inlines.INLINES.EMBEDDED_ENTRY,
    'text',
];

});

unwrapExports(schemaConstraints);
var schemaConstraints_1 = schemaConstraints.V1_NODE_TYPES;
var schemaConstraints_2 = schemaConstraints.TEXT_CONTAINERS;
var schemaConstraints_3 = schemaConstraints.HEADINGS;
var schemaConstraints_4 = schemaConstraints.CONTAINERS;
var schemaConstraints_5 = schemaConstraints.VOID_BLOCKS;
var schemaConstraints_6 = schemaConstraints.TABLE_BLOCKS;
var schemaConstraints_7 = schemaConstraints.LIST_ITEM_BLOCKS;
var schemaConstraints_8 = schemaConstraints.TOP_LEVEL_BLOCKS;

var types = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

});

unwrapExports(types);

var nodeTypes = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

});

unwrapExports(nodeTypes);

var emptyDocument = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * A rich text document considered to be empty.
 * Any other document structure than this is not considered empty.
 */
var EMPTY_DOCUMENT = {
    nodeType: blocks.BLOCKS.DOCUMENT,
    data: {},
    content: [
        {
            nodeType: blocks.BLOCKS.PARAGRAPH,
            data: {},
            content: [
                {
                    nodeType: 'text',
                    value: '',
                    marks: [],
                    data: {},
                },
            ],
        },
    ],
};
exports.default = EMPTY_DOCUMENT;

});

unwrapExports(emptyDocument);

var helpers = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.isText = exports.isBlock = exports.isInline = void 0;


/**
 * Tiny replacement for Object.values(object).includes(key) to
 * avoid including CoreJS polyfills
 */
function hasValue(obj, value) {
    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
        var key = _a[_i];
        if (value === obj[key]) {
            return true;
        }
    }
    return false;
}
/**
 * Checks if the node is an instance of Inline.
 */
function isInline(node) {
    return hasValue(inlines.INLINES, node.nodeType);
}
exports.isInline = isInline;
/**
 * Checks if the node is an instance of Block.
 */
function isBlock(node) {
    return hasValue(blocks.BLOCKS, node.nodeType);
}
exports.isBlock = isBlock;
/**
 * Checks if the node is an instance of Text.
 */
function isText(node) {
    return node.nodeType === 'text';
}
exports.isText = isText;

});

unwrapExports(helpers);
var helpers_1 = helpers.isText;
var helpers_2 = helpers.isBlock;
var helpers_3 = helpers.isInline;

var dist = createCommonjsModule(function (module, exports) {
var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.helpers = exports.EMPTY_DOCUMENT = exports.MARKS = exports.INLINES = exports.BLOCKS = void 0;

Object.defineProperty(exports, "BLOCKS", { enumerable: true, get: function () { return blocks.BLOCKS; } });

Object.defineProperty(exports, "INLINES", { enumerable: true, get: function () { return inlines.INLINES; } });

Object.defineProperty(exports, "MARKS", { enumerable: true, get: function () { return __importDefault(marks).default; } });
__exportStar(schemaConstraints, exports);
__exportStar(types, exports);
__exportStar(nodeTypes, exports);

Object.defineProperty(exports, "EMPTY_DOCUMENT", { enumerable: true, get: function () { return __importDefault(emptyDocument).default; } });
var helpers$1 = __importStar(helpers);
exports.helpers = helpers$1;

});

unwrapExports(dist);
var dist_1 = dist.helpers;
var dist_2 = dist.EMPTY_DOCUMENT;
var dist_3 = dist.MARKS;
var dist_4 = dist.INLINES;
var dist_5 = dist.BLOCKS;

function isEmpty(obj) {
  if (!obj) {
    return true;
  }

  var isArray = obj instanceof Array;

  if (isArray) {
    return obj.length <= 0;
  }

  var isObject = obj.constructor === Object;

  if (isObject) {
    return Object.keys(obj).length === 0;
  }

  return false;
}

function cx() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var truthyClassNames = Array.prototype.slice.call(args).filter(Boolean);

  if (isEmpty(truthyClassNames)) {
    return undefined;
  }

  return truthyClassNames.join(' ');
}

function get(obj, path, defaultValue) {
  if (!obj || !path) {
    return obj;
  } // Get the path as an array


  var segments = typeof path !== 'string' ? path : stringToSegments(path); // Cache the current object

  var current = obj; // For each item in the path, dig into the object

  for (var i = 0; i < segments.length; i += 1) {
    // If the item isn't found, return the default (or undefined)
    if (!current[segments[i]]) {
      return defaultValue;
    } // Otherwise, update the current value


    current = current[segments[i]];
  }

  return current;
}

function stringToSegments(path) {
  // Split to an array from dot notation
  return path.split('.').reduce(function (allSegments, item) {
    // Split to an array from bracket notation
    item.split(/\[([^}]+)\]/g).forEach(function (key) {
      // Push to the new array
      if (key.length > 0) {
        allSegments.push(key);
      }
    });
    return allSegments;
  }, []);
}

/**
 * Default element when the node type is unknown.
 * Renders a prominent warning in development.
 */

function UnknownElement(props) {
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line no-console
    console.debug('Node type is undefined', props);
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement("span", {
      style: {
        color: 'white',
        backgroundColor: 'red'
      }
    }, "Node type is undefined"), props.children);
  }

  return props.children || null;
}

if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line global-require
  var PropTypes = require('prop-types');

  UnknownElement.propTypes = {
    /**
     * The element children.
     */
    children: PropTypes.oneOfType([PropTypes.element, PropTypes.array])
  };
}

/**
 * Default fallback element for block level nodes.
 * Renders a prominent warning in development.
 */

function BlockElement(props) {
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line no-console
    console.debug('Unknown block  node type', props);
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement("span", {
      style: {
        color: 'white',
        backgroundColor: 'red'
      }
    }, "Unknown block node type."), props.children);
  }

  return props.children || null;
}

if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line global-require
  var PropTypes$1 = require('prop-types');

  BlockElement.propTypes = {
    /**
     * The element children.
     */
    children: PropTypes$1.oneOfType([PropTypes$1.element, PropTypes$1.array])
  };
}

/**
 * Default fallback element for inline nodes.
 * Renders a prominent warning in development.
 */

function InlineElement(props) {
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line no-console
    console.debug('Unknown inline node type', props);
    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement("span", {
      style: {
        color: 'white',
        backgroundColor: 'red'
      }
    }, "Unknown inline node type"), props.children);
  }

  return props.children || null;
}

if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line global-require
  var PropTypes$2 = require('prop-types');

  InlineElement.propTypes = {
    /**
     * The element children.
     */
    children: PropTypes$2.oneOfType([PropTypes$2.element, PropTypes$2.array])
  };
}

/**
 * Default element for inline asset nodes.
 * Renders a download link for the asset.
 */

function AssetLink(_ref) {
  var fields = _ref.fields,
      children = _ref.children;
  var file = fields.file,
      title = fields.title;
  return /*#__PURE__*/React.createElement("a", {
    href: file.url,
    download: true
  }, children || title);
}

if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line global-require
  var PropTypes$3 = require('prop-types');

  AssetLink.propTypes = {
    fields: PropTypes$3.shape({
      /**
       * The file meta data, including the source URL
       */
      file: PropTypes$3.shape({
        url: PropTypes$3.string
      }),

      /**
       * The asset title
       */
      title: PropTypes$3.string
    }),

    /**
     * The children (when the node is a hyperlink)
     */
    children: PropTypes$3.any
  };
}

/**
 * Default element for images.
 * Renders a responsive image.
 */

function Image(_ref) {
  var fields = _ref.fields;
  var file = fields.file,
      title = fields.title;
  return /*#__PURE__*/React.createElement("img", {
    src: file.url,
    alt: title,
    style: {
      maxWidth: '100%',
      height: 'auto'
    }
  });
}

if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line global-require
  var PropTypes$4 = require('prop-types');

  Image.propTypes = {
    fields: PropTypes$4.shape({
      /**
       * The file meta data, including the source URL
       */
      file: PropTypes$4.shape({
        url: PropTypes$4.string
      }),

      /**
       * The asset title
       */
      title: PropTypes$4.string
    })
  };
}

/**
 * Default element for videos.
 * Renders a responsive video player.
 */

function Video(_ref) {
  var fields = _ref.fields;
  var file = fields.file;
  /* eslint-disable jsx-a11y/media-has-caption */

  return /*#__PURE__*/React.createElement("video", {
    style: {
      display: 'block',
      maxWidth: '100%',
      height: 'auto'
    },
    controls: true
  }, /*#__PURE__*/React.createElement("source", {
    src: file.url,
    type: file.contentType
  }), /*#__PURE__*/React.createElement("p", null, "Your browser does not support HTML5 video. Here is a", ' ', /*#__PURE__*/React.createElement("a", {
    href: file.url,
    download: true
  }, "link to the video"), ' ', "instead."));
}

if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line global-require
  var PropTypes$5 = require('prop-types');

  Video.propTypes = {
    fields: PropTypes$5.shape({
      /**
       * The file meta data, including the source URL
       */
      file: PropTypes$5.shape({
        contentType: PropTypes$5.string,
        url: PropTypes$5.string
      })
    })
  };
}

/**
 * Default element for audio files.
 * Renders a responsive audio player.
 */

function Audio(_ref) {
  var fields = _ref.fields;
  var file = fields.file;
  /* eslint-disable jsx-a11y/media-has-caption */

  return /*#__PURE__*/React.createElement("audio", {
    style: {
      display: 'block',
      maxWidth: '100%',
      height: 'auto'
    },
    controls: true
  }, /*#__PURE__*/React.createElement("source", {
    src: file.url,
    type: file.contentType
  }), /*#__PURE__*/React.createElement("p", null, "Your browser does not support HTML5 audio. Here is a", ' ', /*#__PURE__*/React.createElement("a", {
    href: file.url,
    download: true
  }, "link to the audio file"), ' ', "instead."));
}

if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line global-require
  var PropTypes$6 = require('prop-types');

  Audio.propTypes = {
    fields: PropTypes$6.shape({
      /**
       * The file meta data, including the source URL
       */
      file: PropTypes$6.shape({
        contentType: PropTypes$6.string,
        url: PropTypes$6.string
      })
    })
  };
}

var _excluded = ["uri"];

var _tagMap, _entryMap, _assetMap;
var defaultOptions = {
  overrides: {},
  createElement: React.createElement
};
var assetElementMap = {
  image: Image,
  video: Video,
  audio: Audio
};
var tagMap = (_tagMap = {}, _defineProperty(_tagMap, dist_5.HEADING_1, 'h1'), _defineProperty(_tagMap, dist_5.HEADING_2, 'h2'), _defineProperty(_tagMap, dist_5.HEADING_3, 'h3'), _defineProperty(_tagMap, dist_5.HEADING_4, 'h4'), _defineProperty(_tagMap, dist_5.HEADING_5, 'h5'), _defineProperty(_tagMap, dist_5.HEADING_6, 'h6'), _defineProperty(_tagMap, dist_5.PARAGRAPH, 'p'), _defineProperty(_tagMap, dist_5.UL_LIST, 'ul'), _defineProperty(_tagMap, dist_5.OL_LIST, 'ol'), _defineProperty(_tagMap, dist_5.LIST_ITEM, 'li'), _defineProperty(_tagMap, dist_5.QUOTE, 'blockquote'), _defineProperty(_tagMap, dist_5.HR, 'hr'), _defineProperty(_tagMap, dist_4.HYPERLINK, 'a'), _defineProperty(_tagMap, dist_3.BOLD, 'strong'), _defineProperty(_tagMap, dist_3.ITALIC, 'em'), _defineProperty(_tagMap, dist_3.UNDERLINE, 'u'), _defineProperty(_tagMap, dist_3.CODE, 'code'), _tagMap);
var entryMap = (_entryMap = {}, _defineProperty(_entryMap, dist_5.EMBEDDED_ENTRY, true), _defineProperty(_entryMap, dist_4.ENTRY_HYPERLINK, true), _defineProperty(_entryMap, dist_4.EMBEDDED_ENTRY, true), _entryMap);
var assetMap = (_assetMap = {}, _defineProperty(_assetMap, dist_5.EMBEDDED_ASSET, true), _defineProperty(_assetMap, dist_4.ASSET_HYPERLINK, true), _assetMap);

function isEntryNode(node) {
  return entryMap[node.nodeType];
}

function isAssetNode(node) {
  return assetMap[node.nodeType];
}

function richTextToJsx(richText) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!richText) {
    return null;
  }

  return nodeListToJsx(richText.content, _objectSpread2(_objectSpread2({}, defaultOptions), options));
}
function nodeListToJsx(nodes, options) {
  if (isEmpty(nodes)) {
    return null;
  }

  return nodes.map(function (node, key) {
    return nodeToJsx(node, options, key);
  });
}
function nodeToJsx() {
  var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var key = arguments.length > 2 ? arguments[2] : undefined;
  var nodeType = node.nodeType;

  if (!nodeType) {
    return unknownNodeToJsx(node, options, key);
  }

  if (dist_1.isText(node)) {
    return textNodeToJsx(node, options, key);
  }

  if (isEntryNode(node)) {
    return entryNodeToJsx(node, options, key);
  }

  if (isAssetNode(node)) {
    return assetNodeToJsx(node, options, key);
  }

  return parentNodeToJsx(node, options, key);
}
function unknownNodeToJsx(node, options, key) {
  var data = node.data,
      content = node.content;
  var createElement = options.createElement;

  var props = _objectSpread2(_objectSpread2({}, data.target), {}, {
    key: key
  });

  var children = isEmpty(content) ? undefined : nodeListToJsx(content, options);
  return createElement(UnknownElement, props, children);
}
function textNodeToJsx(node, options, key) {
  var _node$data = node.data,
      data = _node$data === void 0 ? {} : _node$data,
      value = node.value,
      marks = node.marks;
  var overrides = options.overrides,
      createElement = options.createElement;

  if (isEmpty(marks)) {
    var element = getElement('text', overrides);

    if (!element) {
      return value;
    }

    var props = getProps('text', overrides, _objectSpread2(_objectSpread2({}, data), {}, {
      key: key
    }));
    return createElement(element, props, value);
  }

  return marks.reduce(function (children, mark, markKey) {
    var element = getElement(mark.type, overrides);

    if (!element) {
      return children;
    }

    var props = getProps(mark.type, overrides, _objectSpread2(_objectSpread2({}, data), {}, {
      key: "".concat(key).concat(markKey)
    }));
    return createElement(element, props, children);
  }, value);
}
function entryNodeToJsx(node, options, key) {
  var data = node.data,
      content = node.content,
      nodeType = node.nodeType;
  var overrides = options.overrides,
      createElement = options.createElement;
  var contentType = get(data, 'target.sys.contentType.sys.id');

  if (!contentType) {
    return unknownNodeToJsx(node, options, key);
  }

  var elementOverrides = overrides[nodeType];
  var DefaultElement = dist_1.isBlock(node) ? BlockElement : InlineElement;
  var element = getElement(contentType, elementOverrides) || DefaultElement;
  var props = getProps(nodeType, elementOverrides, _objectSpread2(_objectSpread2({}, data.target), {}, {
    key: key
  }));
  var children = isEmpty(content) ? undefined : nodeListToJsx(content, options);
  return createElement(element, props, children);
}
function assetNodeToJsx(node, options, key) {
  var data = node.data,
      content = node.content,
      nodeType = node.nodeType;
  var overrides = options.overrides,
      createElement = options.createElement;
  var mimeType = get(data, 'target.fields.file.contentType', '');
  var mimeTypeGroup = mimeType.split('/')[0];

  if (!mimeTypeGroup) {
    return unknownNodeToJsx(node, options, key);
  }

  var elementOverrides = overrides[nodeType];
  var BlockAsset = assetElementMap[mimeTypeGroup];
  var DefaultAsset = dist_1.isBlock(node) ? BlockAsset : AssetLink;
  var element = getElement(mimeTypeGroup, elementOverrides) || DefaultAsset;

  if (!element) {
    return unknownNodeToJsx(node, options, key);
  }

  var props = getProps(nodeType, elementOverrides, _objectSpread2(_objectSpread2({}, data.target), {}, {
    key: key
  }));
  var children = isEmpty(content) ? undefined : nodeListToJsx(content, options);
  return createElement(element, props, children);
}
function parentNodeToJsx(node, options, key) {
  var data = node.data,
      content = node.content,
      nodeType = node.nodeType;
  var overrides = options.overrides,
      createElement = options.createElement;
  var element = getElement(nodeType, overrides) || BlockElement;

  var href = data.uri,
      rest = _objectWithoutProperties(data, _excluded);

  var props = getProps(nodeType, overrides, _objectSpread2(_objectSpread2({}, rest), {}, {
    href: href,
    key: key
  }));
  var children = isEmpty(content) ? undefined : nodeListToJsx(content, options);
  return createElement(element, props, children);
}
function getElement(type, overrides) {
  var override = getOverride(type, overrides);

  if (override) {
    return typeof override === 'function' ? override : override.component;
  }

  return tagMap[type];
}
function getProps(type, overrides) {
  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var override = getOverride(type, overrides);

  if (isEmpty(override) || typeof override === 'function') {
    return data;
  }

  var overrideProps = override.props || {};
  return _objectSpread2(_objectSpread2(_objectSpread2({}, overrideProps), data), {}, {
    className: cx(data.className, overrideProps.className)
  });
}
function getOverride(type) {
  var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var tag = tagMap[type];
  return overrides[tag] || overrides[type];
}

var _excluded$1 = ["richText"];
/**
 * Parse and render Contentful rich text to JSX.
 */

var RichText = function RichText(_ref) {
  var richText = _ref.richText,
      options = _objectWithoutProperties(_ref, _excluded$1);

  return richTextToJsx(richText, options);
};

if (process.env.NODE_ENV !== 'production') {
  // eslint-disable-next-line global-require
  var PropTypes$7 = require('prop-types');

  RichText.propTypes = {
    /**
     * The Contentful rich text AST to be parsed and rendered.
     */
    richText: PropTypes$7.object,

    /**
     * Map block types to React components, e.g. `p` -> `<Text />`
     * The React component is passed all HTML attributes as props.
     * By default, block types are mapped to the corresponding HTML tags.
     */
    blocks: PropTypes$7.object,

    /**
     * Override an HTML tag with a React component, e.g. `a` -> `<Link />`
     * The React component is passed all HTML attributes as props.
     */
    inlines: PropTypes$7.object,

    /**
     * A function create and return a new React element.
     * Defaults to React.createElement()
     */
    createElement: PropTypes$7.func
  };
}

export default RichText;
export { richTextToJsx };
